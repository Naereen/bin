#!/usr/bin/env bash
# By: Lilian BESSON
# Email: Lilian.BESSON[AT]ens-cachan[DOT]fr
# Date: 15-04-2014
# Web: http://besson.qc.to/bin/strapdown2pdf
#
# strapdown2pdf, a small script to auto convert a StrapDown.js flavored 
# HTML file (used to write with a Markdown syntax) to PDF
# 
# Requirements:
#  + [lunamark](http://jgm.github.io/lunamark/lunamark.1.html)
#  + [autotex](http://besson.qc.to/bin/autotex) 
#  + [PDFCompress](http://besson.qc.to/bin/PDFCompress) 
#  + [pdflatex](http://besson.qc.to/bin/pdflatex)
# 
# References:
#  + [StrapDown.js](http://lbesson.bitbucket.org/md/)
#
# Licence [GPLv3](http://besson.qc.to/LICENCE.html)
# 
version='0.1'

StrapDown2HTML() {
	input="$(basename "$1")"
	name="${input%.html}"

	# Be sure we have a nice HTML file and not something else :)
	if [ "${name}.html" != "${input}" ]; then
		echo -e "${red}WARNING${white} The input file ${input} seems to not be a valid HTML file."
		echo -e "${red}I prefer to quit NOW.${white}"
		exit 5
	fi
	# To be even more paranoid, I could search the HTML file and be sure that StrapDown.js is indeed used, but pfiou I'm lazy.

	p="$(pwd)"

	echo -e "Working with $u$input$U on $blue$p$white." | tee -a /tmp/strapdown2pdf.log

	echo -e "${magenta}The following lines will be removed :${white}"
	grep -n "^<" "$input" 
	# read 

	# Remove HTML only lines (typically, the first one and the 4 last ones),
	grep -v "^<" "$input" > /tmp/"${name}".md
	# cat "$input" | head -n -4 | tail -n +2 > /tmp/$*.md
	# Now we have a pure Markdown file (at least we hope)

	# Convert md -> tex with lunamark (in /tmp/, as always)
	lunamark -t latex -o "${name}".tex~ /tmp/"${name}".md

	# Because we are proud of this script
	echo "%% LaTeX file automatically generated with [strapdown2pdf](http://besson.qc.to/bin/strapdown2pdf)" > "${name}".tex 
	echo "%% from ${p}/${input}, the $(date)." >> "${name}".tex 

	# Adding two autotex specials comments,
	# One for the title
	# echo "%autotex% Titre: LeÃ§ons de "${name}" 2014" > "${name}".tex 
	title="$(grep -o -m 1 "<title>[^<]*</title>" "${input}" | grep -o ">.*<" | sed s/">"/""/ | sed s/"<"/""/)"
	echo -e "${cyan}I found this as a possible title${white} : $u${title}$U." | tee -a /tmp/strapdown2pdf.log
	# read 

	echo "%autotex% Titre: ${title}" >> "${name}".tex 

	# And one for the scale
	echo "%autotex% Scale: 0.85" >> "${name}".tex 

	# We add the .tex file (it does NOT have any LaTeX headers)
	cat "${name}".tex~ >> "${name}".tex 	 

	# Compile in batchmode it with autotex, to automatically add headers and packages stuff
	autotex batchmode "${name}".tex 
	# read 

	# Compress it (and even gpg sign it !)
	PDFCompress --sign "${name}".pdf

	# Clean up local repertory
	mv -vf "${name}".tex* /tmp/

	# Proudly say that we are done
	echo -e "${green}The file ${name}.pdf have been well generated from ${input}, and it should be really beautiful :)" | tee -a /tmp/strapdown2pdf.log
	# read 
}

# And finally treat every arguments.
StrapDown2HTML "${1}"
shift
for finput in "$@"; do
	echo -e "\n\n************************************************************\n"
	echo -e "${red}Generating to the next file..."
	StrapDown2HTML "${finput}"
done

## END