#!/usr/bin/env bash
# By: Lilian BESSON
# Email: Lilian.BESSON[AT]ens-cachan[DOT]fr
# Date: 15-09-2014
# Web: http://besson.qc.to/bin/strapdown2pdf
# Web2: http://lbesson.bitbucket.org/strapdown2pdf.html
#
# strapdown2pdf, a small script to simply convert a "StrapDown.js flavored"
# HTML file (used to write with a Markdown syntax) to a PDF document.
#
# More details on http://lbesson.bitbucket.org/strapdown2pdf.html
#
# Requirements:
#  + [lunamark](http://jgm.github.io/lunamark/lunamark.1.html)
#  + [autotex](http://besson.qc.to/bin/autotex) (from my webpage),
#  + [PDFCompress](http://besson.qc.to/bin/PDFCompress) (from my webpage),
#  + [pdflatex](http://besson.qc.to/bin/pdflatex) (from my webpage).
#
# References and more details:
#  + [StrapDown.js](http://lbesson.bitbucket.org/md/)
#
# Licence: [GPLv3](http://besson.qc.to/LICENCE.html)
#
# Bugs / FIXMES:
#  1. Hack something to preserve LaTeX code verbatim between $ $ in the HTML initial document
#     Example: http://javis/a/maths.html -> http://javis/a/maths.pdf works very well,
#     only for MathJax flavored maths formulas, which are all copied in the .tex with escaped $ and { : \{ and \$ every where :(
#
#
version='0.6'

# $OPTARG can contain the argument of the option k (if specified with hvk: or hk:v for example)
while getopts hv option
do
	 case $option in
	 	v|version|-version)
			echo -e "strapdown2pdf $version"
			exit 0
			;;
		h|help|-help)
			echo -e "${green}strapdown2pdf${white} -help | [options]"
			echo -e ""
			echo -e "Print a StrapDown-powered web-page to a PDF document, using lunamark and autotex."
			echo -e "Help:"
			echo -e "    ${yellow}-h${white}           to print this help message (and quit)."
			echo -e "    ${yellow}-v${white}           to print just the version of strapdown2pdf (and quit)."
			echo -e ""
			echo -e "Options:"
			echo -e "    ${yellow}None yet !${white}"
			echo -e ""
			echo -e "strapdown2pdf v$version : Copyrights: (c) Lilian Besson 2011-2014."
			echo -e "Released under the term of the GPL v3 Licence (more details on http://besson.qc.to/LICENSE.html)."
			echo -e "In particular, strapdown2pdf is provided WITHOUT ANY WARANTY."
			exit 0
			;;
	 esac
done

StrapDown2HTML() {
	input="$(basename "$1")"
	name="${input%.html}"

	# Be sure we have a nice HTML or Markdown file and not something else :)
	if [ "${name}.html" != "${input}" ]; then
		echo -e "${red}WARNING${white} The input file ${input} seems to not be a valid HTML file."
		if [ "${input%.md}.md" != "${input}" ]; then
			echo -e "${red}WARNING${white} The input file ${input} seems to not be a Markdown either."
			echo -e "${red}I prefer to quit NOW.${white}"
			exit 5
		else
			echo -e "${green}COOL${white} The input file ${input} seems to be a valid MarkDown file : ${blue}good :)${white}."
			name="${input%.md}"
		fi
	else
		echo -e "${green}COOL${white} The input file ${input} seems to be a valid MarkDown file or StrapDown-powered HTML file : ${blue}good :)${white}."
	fi
	# To be even more paranoid, I could search the HTML file and be sure that StrapDown.js is indeed used, but pfiou I'm lazy.

	p="$(pwd)"

	echo -e "Working with $u$input$U on $blue$p${white}." | tee -a /tmp/strapdown2pdf.log

	echo -e "${magenta}The following lines will be removed :${white}"
	grep -n "^<" "$input"

	# Remove HTML only lines (typically, the first one and the 4 last ones),
	grep -v "^<" "$input" > /tmp/"${name}".md
	# Now we have a pure Markdown file (at least we hope)

	# # And a final line to say "Compiled from HTML/MarkDown with StrapDown.js to PDF with ..."
	# # echo -e "\n\n\n----\n\n\hfill{}\n\n> > Compiled to *PDF* from a *HTML/Markdown* file (powered by [StrapDown.js](http://lbesson.bitbucket.org/md/)) with **[strapdown2pdf](http://lbesson.bitbucket.org/md/strapdown2pdf.html)** version ${version}.\n" >> /tmp/"${name}".md

	# Convert md -> tex with lunamark (in /tmp/, as always)
	# FIXME: here we should improve the LaTeX math code preservation
	lunamark -Xhash_enumerators -t latex -o "${name}".tex~ /tmp/"${name}".md || exit 21

	# Because we are proud of this script
	echo "%% LaTeX file automatically generated with [strapdown2pdf](http://besson.qc.to/bin/strapdown2pdf)" > "${name}".tex
	echo "%% from ${p}/${input}, the $(date)." >> "${name}".tex

	# Adding two autotex specials comments,
	# One for the title
	# echo "%autotex% Titre: Leçons de "${name}" 2014" > "${name}".tex
	title="$(grep -o -m 1 "<title>[^<]*</title>" "${input}" | grep -o ">.*<" | sed s/">"/""/ | sed s/"<"/""/)"
	echo -e "${cyan}I found this as a possible title${white} : $u${title}$U." | tee -a /tmp/strapdown2pdf.log
	# read

	echo "%autotex% Titre: ${title}" >> "${name}".tex

	# And one for the scale
	echo "%autotex% Scale: 0.85" >> "${name}".tex

	# We add the .tex file (it does NOT have any LaTeX headers)
	# FIXME: you have to find a *simple* 'sed' command to remove espaced math LaTeX code in ${name}.tex ...
	cat "${name}".tex~ \
		| sed s/'\\\$'/$/g \
		| sed s/'\\char92{}'/'\\'/g \
		| sed s/'\\^'/'^'/g \
		| sed s/'\\char62{}'/'>'/g \
		| sed s/'\\char60{}'/'<'/g \
		| sed s/'\($[^$]*\)\\{'/'\1{'/g \
		| sed s/'\($[^$]*\)\\}'/'\1}'/g \
		| sed s/'\($[^$]*\)\\{'/'\1{'/g \
		| sed s/'\($[^$]*\)\\}'/'\1}'/g \
		| sed s/'\($[^$]*\)\\_'/'\1_'/g \
		| sed s/'\($[^$]*\)\\_'/'\1_'/g \
		| sed s/'\($[^$]*\){}'/'\1'/g \
		| sed s/'\"\([^"]*\)\"'/'« \1 »'/g \
		>> "${name}".tex

	# And a final line to say "Compiled from HTML/MarkDown with StrapDown.js to PDF with ..."
	echo -e "\n\n\n\n%% Added with strapdown2pdf\n\\\\hspace{\\\\fill}\n\\\\vfill{}\n\n\\\\hspace{\\\\fill}\\\\rule{.6\\\\linewidth}{0.4pt}\\\\hspace{\\\\fill}\n\n\\\\begin{quote}\n\\\\begin{footnotesize}\n (Proudly compiled to \\\\textbf{PDF} from a \\\\texttt{HTML/Markdown} file (powered by \\\\href{http://lbesson.bitbucket.org/md/}{\\\\texttt{StrapDown.js}}) with \\\\textbf{\\\\href{http://lbesson.bitbucket.org/md/strapdown2pdf.html}{strapdown2pdf}}, \\\\texttt{v${version}}.)\n\\\\end{footnotesize}\n\\\\end{quote}\n"  >> "${name}".tex

	# Compile in batchmode it with autotex, to automatically add headers and packages stuff
	autotex batchmode "${name}".tex
	# read

	# Compress it (and even gpg sign it !)
	# PDFCompress --sign "${name}".pdf
	PDFCompress "${name}".pdf

	# Clean up local repertory
	mv -vf "${name}".tex* /tmp/

	# Proudly say that we are done
	echo -e "${green}The file ${name}.pdf have been well generated from ${input}, and it should be really beautiful :)" | tee -a /tmp/strapdown2pdf.log
	# read
}

# And finally treat every arguments.
StrapDown2HTML "${1}"
shift
for finput in "$@"; do
	echo -e "\n\n************************************************************\n"
	echo -e "${red}Generating to the next file..."
	StrapDown2HTML "${finput}"
done

## END
